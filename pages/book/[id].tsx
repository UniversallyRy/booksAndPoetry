import type { NextPage, GetStaticProps, GetServerSideProps,GetStaticPathsResult, GetStaticPaths} from 'next'
import Head from 'next/head'
import { Box, Divider, Flex, Text } from '@chakra-ui/react'
import axios from 'axios'
import { useRouter } from 'next/router'
import useSWR from 'swr'



export type DataProps = {
  map: (item: any)=> void;
  0: number
  works: {
    publishers: string[];
    number_of_pages: number;
    isbn_10: string[];
    covxers: number[];
    authors: [ { key: string } ];
    key: string;
    ocaid: string;
    contributions: string[];
    languages: [ { key: string } ];
    classifications: {};
    source_records: string[];
    title: string;
    identifiers: { goodreads:  string[], librarything: string[] },
    isbn_13: string[];
    local_id: string[];
    publish_date: string;
    works: [ { key: string; } ],
    type: { key: string; },
    first_sentence: {
      type: string;
      value: string;
    },
    latest_revision: number;
    revision: number;
    created: { type: string, value: string },
    last_modified: { type: string, value: string };
  }[];
  key?: string | undefined
}

const fetchBook = (id: string) => {
  axios
    .get(`https://openlibrary.org/books/${id}.json`)
    .then(({ data }) => data);
} 

const fetcher = (url: string) => axios.get(url).then(res => res.data)

const Books: NextPage = ({book, bookId}:any) => {
  // const { data, error } = useSWR('/api/book', fetcher)
  const bookUrl = `https://openlibrary.org/works/${bookId}.json`
  const { data, error } = useSWR(bookUrl, fetcher)  
  if (error) return <div>failed to load</div>
  if (!data) return <div>loading...</div>
    return (
      <Box align="center">
        <Head>  
          <title>{data.title}</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Flex direction='column'>
          <Text>Name: {book.title}</Text>
          <Divider/>
          <Text>Publisher: {book.publishers}</Text>
          <Divider/>
          <Text>Publish Date: {book.first_publish_date}</Text>
          <Divider/>
          <Text>Pages: {book.number_of_pages}</Text>
          <Divider/>
          <Text>Summary: {book.description.value}</Text>
          <Divider/>
          <Divider/>
          <Text>1st Sentence: {book.title}</Text>
          <Divider/>
        </Flex>
      </Box>
    )
}

export const getStaticProps: GetStaticProps = async ( {params }:any) => {
  const bookId = params.id
  console.log(params)
  // const res = await axios.get('https://openlibrary.org/isbn/9780140328721')
  const res = await axios.get(`https://openlibrary.org/works/${bookId}.json`)
  const book: DataProps = await res.data
  console.log(bookId)
  return {
    props: {
      book, 
      bookId,
      // dehydratedState: dehydrate(queryClient),
      // 6 hours before refresh
      revalidate: 60 * 60 * 6,
    },
  };
};
  
  export const getStaticPaths = async () => {
    const res = await axios.get('https://openlibrary.org/subjects/love.json?limit=10?offset')
    const books: DataProps = await res.data
    const paths =  books.works.map((item:any) => {
      const endPoint = item.key;
      const bookId = item.key.slice(7,);
      return {
        params: {
          endPoint: endPoint,
          id: bookId,
        }
      }
    });
    console.log(paths)
    return {
      paths,
      fallback: false
    }
  };

export default Books
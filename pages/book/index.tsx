import type { NextPage, GetStaticProps, InferGetStaticPropsType} from 'next'
import { NextApiRequest, NextApiResponse } from "next";
import Head from 'next/head'
import { Box, Divider, Flex, Text } from '@chakra-ui/react'
import axios from 'axios'
import useSWR from 'swr'
import { useEffect, useState } from 'react'
import { useRouter } from 'next/router'



export type DataProps = {
  book: {
    publishers: string[];
    number_of_pages: number;
    isbn_10: string[];
    covxers: number[];
    authors: [ { key: string } ];
    key: string;
    ocaid: string;
    contributions: string[];
    languages: [ { key: string } ];
    classifications: {};
    source_records: string[];
    title: string;
    identifiers: { goodreads:  string[], librarything: string[] },
    isbn_13: string[];
    local_id: string[];
    publish_date: string;
    works: [ { key: string; } ],
    type: { key: string; },
    first_sentence: {
      type: string;
      value: string;
    },
    latest_revision: number;
    revision: number;
    created: { type: string, value: string },
    last_modified: { type: string, value: string };
  }
}
export function useQuery() {
  const router = useRouter();
  const ready = router.asPath !== router.route;
  if (!ready) return null;
  return router.query;
}


const Books: NextPage = ({ book }: InferGetStaticPropsType<GetStaticProps>) => {
  const [newData, setData] = useState({});
  const fetcher = (url:string) => axios.get(url).then(res => res.data)
  const { data, error } = useSWR('http://localhost:3000/api/book/index', fetcher)
  const router = useRouter()
  const query = useQuery();
  useEffect(() => {
    if (!query) {
      return;
    }
    console.log('my query exists!!', query);
  }, [query]);

  // const fetchData = () => {
  //   axios.get("https://openlibrary.org/isbn/9780140328721")
  //   .then((res) => {
  //     setData(res.data)
  //     console.log(res.data)
  //   })
  //   .catch(err => console.log(err));
  // }
  
  // useEffect(() => fetchData(), [data])
  if (!data) return <div>loading...</div>
  if (error) return <div>failed to load</div>

  return (
    <Box align="center">
      <Head>
        <title>{data.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex direction='column'>
        <Text>Name: {book.title}</Text>
        <Divider/>
        <Text>Publisher: {book.publishers}</Text>
        <Divider/>
        <Text>Publish Date: {data.publish_date}</Text>
        <Divider/>
        <Text>Pages: {data.number_of_pages}</Text>
        <Divider/>
        {/* <Text>1st Sentence: {data.first_sentence.value}</Text> */}
        <Divider/>
      </Flex>
      <button type="button" onClick={() => router.back()}>
        Click here to go back
      </button>
    </Box>
  )
}

export const getStaticProps: GetStaticProps = async (context) => {
    const res = await axios.get('http://localhost:3000/api/book/index')
  
    return {
      props: {
        book: res.data
      },
    }
  }

export default Books